// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartTravel.Infrastructure.Data;

#nullable disable

namespace SmartTravel.Infrastructure.Migrations
{
    [DbContext(typeof(SmartTravelDbContext))]
    partial class SmartTravelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartTravel.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingReference")
                        .IsUnique();

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Hotel booking services",
                            DisplayOrder = 1,
                            Icon = "hotel",
                            IsActive = true,
                            Name = "Accommodation"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Local transportation services",
                            DisplayOrder = 2,
                            Icon = "car",
                            IsActive = true,
                            Name = "Transportation"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Food delivery and restaurant services",
                            DisplayOrder = 3,
                            Icon = "restaurant",
                            IsActive = true,
                            Name = "Food & Dining"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Entertainment and leisure activities",
                            DisplayOrder = 4,
                            Icon = "entertainment",
                            IsActive = true,
                            Name = "Entertainment"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Inter-city transportation",
                            DisplayOrder = 5,
                            Icon = "bus",
                            IsActive = true,
                            Name = "Long Distance Travel"
                        });
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.CurrencyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FromCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ToCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("FromCurrency", "ToCurrency")
                        .IsUnique();

                    b.ToTable("CurrencyRates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromCurrency = "VND",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8228),
                            Rate = 0.000041m,
                            ToCurrency = "USD"
                        },
                        new
                        {
                            Id = 2,
                            FromCurrency = "VND",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8230),
                            Rate = 0.000038m,
                            ToCurrency = "EUR"
                        },
                        new
                        {
                            Id = 3,
                            FromCurrency = "VND",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8232),
                            Rate = 0.0061m,
                            ToCurrency = "JPY"
                        },
                        new
                        {
                            Id = 4,
                            FromCurrency = "VND",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8233),
                            Rate = 0.054m,
                            ToCurrency = "KRW"
                        },
                        new
                        {
                            Id = 5,
                            FromCurrency = "VND",
                            IsActive = true,
                            LastUpdated = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8235),
                            Rate = 0.000032m,
                            ToCurrency = "GBP"
                        });
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppIcon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AppStoreUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PlayStoreUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8132),
                            Currency = "VND",
                            Description = "Book hotels, flights, and activities",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsPopular = true,
                            Name = "Traveloka",
                            ProviderName = "Traveloka"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8148),
                            Currency = "VND",
                            Description = "Travel experiences and activities",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsPopular = true,
                            Name = "Klook",
                            ProviderName = "Klook"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8151),
                            Currency = "VND",
                            Description = "Hotel booking platform",
                            DisplayOrder = 3,
                            IsActive = true,
                            IsPopular = false,
                            Name = "Agoda",
                            ProviderName = "Agoda"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8178),
                            Currency = "VND",
                            Description = "Ride-hailing and food delivery",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsPopular = true,
                            Name = "Grab",
                            ProviderName = "Grab"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8180),
                            Currency = "VND",
                            Description = "Vietnamese ride-hailing app",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsPopular = false,
                            Name = "Be",
                            ProviderName = "Be"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8181),
                            Currency = "VND",
                            Description = "Electric taxi service",
                            DisplayOrder = 3,
                            IsActive = true,
                            IsPopular = false,
                            Name = "XanhSM",
                            ProviderName = "XanhSM"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8182),
                            Currency = "VND",
                            Description = "Public bus information",
                            DisplayOrder = 4,
                            IsActive = true,
                            IsPopular = false,
                            Name = "BusMap",
                            ProviderName = "BusMap"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8184),
                            Currency = "VND",
                            Description = "Food delivery service",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsPopular = true,
                            Name = "GrabFood",
                            ProviderName = "Grab"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8185),
                            Currency = "VND",
                            Description = "Food delivery platform",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsPopular = false,
                            Name = "ShopeeFood",
                            ProviderName = "Shopee"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8186),
                            Currency = "VND",
                            Description = "Food delivery service",
                            DisplayOrder = 3,
                            IsActive = true,
                            IsPopular = false,
                            Name = "BeFood",
                            ProviderName = "Be"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8187),
                            Currency = "VND",
                            Description = "Movie ticket booking",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsPopular = false,
                            Name = "CGV Cinemas",
                            ProviderName = "CGV"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8188),
                            Currency = "VND",
                            Description = "Movie ticket booking",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsPopular = false,
                            Name = "Lotte Cinema",
                            ProviderName = "Lotte"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8190),
                            Currency = "VND",
                            Description = "Inter-city bus service",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsPopular = false,
                            Name = "Phương Trang",
                            ProviderName = "Phương Trang"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 8, 24, 8, 57, 23, 309, DateTimeKind.Utc).AddTicks(8191),
                            Currency = "VND",
                            Description = "Premium bus service",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsPopular = false,
                            Name = "Limousine",
                            ProviderName = "Limousine"
                        });
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.ServiceReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceReviews");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.TourGuide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Languages")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Specializations")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TotalReviews")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TourGuides");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.TourGuideReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("TourGuideId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourGuideId");

                    b.HasIndex("UserId");

                    b.ToTable("TourGuideReviews");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferenceKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PreferenceValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.Booking", b =>
                {
                    b.HasOne("SmartTravel.Domain.Entities.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartTravel.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.Service", b =>
                {
                    b.HasOne("SmartTravel.Domain.Entities.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.ServiceReview", b =>
                {
                    b.HasOne("SmartTravel.Domain.Entities.Service", "Service")
                        .WithMany("Reviews")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTravel.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.TourGuideReview", b =>
                {
                    b.HasOne("SmartTravel.Domain.Entities.TourGuide", "TourGuide")
                        .WithMany("Reviews")
                        .HasForeignKey("TourGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartTravel.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TourGuide");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.UserPreference", b =>
                {
                    b.HasOne("SmartTravel.Domain.Entities.User", "User")
                        .WithMany("UserPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.Service", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.TourGuide", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SmartTravel.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("UserPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
